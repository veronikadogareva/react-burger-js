{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bound');\nvar $WeakSet = GetIntrinsic('%WeakSet%', true);\n\n/** @type {undefined | (<V>(thisArg: Set<V>, value: V) => boolean)} */\nvar $setHas = callBound('WeakSet.prototype.has', true);\nif ($setHas) {\n  /** @type {undefined | (<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => boolean)} */\n  var $mapHas = callBound('WeakMap.prototype.has', true);\n\n  /** @type {import('.')} */\n  module.exports = function isWeakSet(x) {\n    if (!x || typeof x !== 'object') {\n      return false;\n    }\n    try {\n      // @ts-expect-error TS can't figure out that $setHas is always truthy here\n      $setHas(x, $setHas);\n      if ($mapHas) {\n        try {\n          // @ts-expect-error this indeed might not be a weak collection\n          $mapHas(x, $mapHas);\n        } catch (e) {\n          return true;\n        }\n      }\n      // @ts-expect-error TS can't figure out that $WeakSet is always truthy here\n      return x instanceof $WeakSet; // core-js workaround, pre-v3\n    } catch (e) {}\n    return false;\n  };\n} else {\n  /** @type {import('.')} */\n  // @ts-expect-error\n  module.exports = function isWeakSet(x) {\n    // eslint-disable-line no-unused-vars\n    // `WeakSet` does not exist, or does not have a `has` method\n    return false;\n  };\n}","map":{"version":3,"names":["GetIntrinsic","require","callBound","$WeakSet","$setHas","$mapHas","module","exports","isWeakSet","x","e"],"sources":["C:/Projects/react-burger-js/node_modules/is-weakset/index.js"],"sourcesContent":["'use strict';\r\n\r\nvar GetIntrinsic = require('get-intrinsic');\r\nvar callBound = require('call-bound');\r\n\r\nvar $WeakSet = GetIntrinsic('%WeakSet%', true);\r\n\r\n/** @type {undefined | (<V>(thisArg: Set<V>, value: V) => boolean)} */\r\nvar $setHas = callBound('WeakSet.prototype.has', true);\r\n\r\nif ($setHas) {\r\n\t/** @type {undefined | (<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => boolean)} */\r\n\tvar $mapHas = callBound('WeakMap.prototype.has', true);\r\n\r\n\t/** @type {import('.')} */\r\n\tmodule.exports = function isWeakSet(x) {\r\n\t\tif (!x || typeof x !== 'object') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\t// @ts-expect-error TS can't figure out that $setHas is always truthy here\r\n\t\t\t$setHas(x, $setHas);\r\n\t\t\tif ($mapHas) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// @ts-expect-error this indeed might not be a weak collection\r\n\t\t\t\t\t$mapHas(x, $mapHas);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// @ts-expect-error TS can't figure out that $WeakSet is always truthy here\r\n\t\t\treturn x instanceof $WeakSet; // core-js workaround, pre-v3\r\n\t\t} catch (e) {}\r\n\t\treturn false;\r\n\t};\r\n} else {\r\n\t/** @type {import('.')} */\r\n\t// @ts-expect-error\r\n\tmodule.exports = function isWeakSet(x) { // eslint-disable-line no-unused-vars\r\n\t\t// `WeakSet` does not exist, or does not have a `has` method\r\n\t\treturn false;\r\n\t};\r\n}\r\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,IAAIC,SAAS,GAAGD,OAAO,CAAC,YAAY,CAAC;AAErC,IAAIE,QAAQ,GAAGH,YAAY,CAAC,WAAW,EAAE,IAAI,CAAC;;AAE9C;AACA,IAAII,OAAO,GAAGF,SAAS,CAAC,uBAAuB,EAAE,IAAI,CAAC;AAEtD,IAAIE,OAAO,EAAE;EACZ;EACA,IAAIC,OAAO,GAAGH,SAAS,CAAC,uBAAuB,EAAE,IAAI,CAAC;;EAEtD;EACAI,MAAM,CAACC,OAAO,GAAG,SAASC,SAASA,CAACC,CAAC,EAAE;IACtC,IAAI,CAACA,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;MAChC,OAAO,KAAK;IACb;IACA,IAAI;MACH;MACAL,OAAO,CAACK,CAAC,EAAEL,OAAO,CAAC;MACnB,IAAIC,OAAO,EAAE;QACZ,IAAI;UACH;UACAA,OAAO,CAACI,CAAC,EAAEJ,OAAO,CAAC;QACpB,CAAC,CAAC,OAAOK,CAAC,EAAE;UACX,OAAO,IAAI;QACZ;MACD;MACA;MACA,OAAOD,CAAC,YAAYN,QAAQ,CAAC,CAAC;IAC/B,CAAC,CAAC,OAAOO,CAAC,EAAE,CAAC;IACb,OAAO,KAAK;EACb,CAAC;AACF,CAAC,MAAM;EACN;EACA;EACAJ,MAAM,CAACC,OAAO,GAAG,SAASC,SAASA,CAACC,CAAC,EAAE;IAAE;IACxC;IACA,OAAO,KAAK;EACb,CAAC;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}